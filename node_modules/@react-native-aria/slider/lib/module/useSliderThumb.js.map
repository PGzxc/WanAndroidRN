{"version":3,"sources":["useSliderThumb.ts"],"names":["clamp","getSliderThumbId","sliderIds","useRef","useLabel","useMove","isRTL","useSliderThumb","opts","state","isReversed","index","isDisabled","trackLayout","isVertical","orientation","direction","undefined","labelId","get","labelProps","fieldProps","trim","stateRef","current","reverseX","currentPosition","moveProps","onMoveStart","setThumbDragging","onMove","deltaX","deltaY","size","height","width","getThumbPercent","delta","setThumbPercent","onMoveEnd","setThumbEditable","onAccessibilityAction","event","max","getThumbMinValue","min","getThumbMaxValue","value","getThumbValue","incrementValue","Math","step","decrementValue","nativeEvent","actionName","setThumbValue","inputProps","disabled","accessibilityRole","accessibilityValue","now","accessibilityActions","name","label","thumbProps"],"mappings":"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","sourcesContent":["import { AriaSliderThumbProps } from '@react-types/slider';\nimport { clamp } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport { useRef } from 'react';\nimport { SliderState } from '@react-stately/slider';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\ninterface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: any;\n\n  /** Props for the visually hidden range input element. */\n  inputProps: any;\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: any;\n}\n\ninterface SliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackLayout: any;\n  /** A ref to the thumb input element. */\n  inputRef: any;\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: SliderThumbOptions,\n  state: SliderState,\n  isReversed?: boolean\n): SliderThumbAria {\n  let { index, isDisabled, trackLayout } = opts;\n\n  let isVertical = opts.orientation === 'vertical';\n  const direction = isRTL() ? 'rtl' : undefined;\n\n  let labelId = sliderIds.get(state);\n  const { labelProps, fieldProps } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim(),\n  });\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  let reverseX = isReversed || direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n  let { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({ deltaX, deltaY }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(index) * size;\n      }\n\n      let delta = isVertical ? deltaY : deltaX;\n      if (reverseX) {\n        if (!isVertical) {\n          delta = -delta;\n        }\n      } else {\n        if (isVertical) {\n          delta = -delta;\n        }\n      }\n      currentPosition.current += delta;\n      stateRef.current.setThumbPercent(\n        index,\n        clamp(currentPosition.current / size, 0, 1)\n      );\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    },\n  });\n\n  state.setThumbEditable(index, !isDisabled);\n\n  const onAccessibilityAction = (event: any) => {\n    const max = state.getThumbMinValue(index);\n    const min = state.getThumbMaxValue(index);\n    const value = state.getThumbValue(index);\n\n    const incrementValue = Math.min(value + state.step ?? 1, max);\n    const decrementValue = Math.max(value - state.step ?? 1, min);\n\n    switch (event.nativeEvent.actionName) {\n      case 'increment':\n        state.setThumbValue(index, incrementValue);\n        break;\n      case 'decrement':\n        state.setThumbValue(index, decrementValue);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return {\n    inputProps: {\n      ...fieldProps,\n      disabled: isDisabled,\n      accessibilityRole: 'adjustable',\n      accessibilityValue: {\n        min: state.getThumbMinValue(index),\n        max: state.getThumbMaxValue(index),\n        now: state.getThumbValue(index),\n      },\n      accessibilityActions: [\n        {\n          name: 'increment',\n          label: 'Increment',\n        },\n        {\n          name: 'decrement',\n          label: 'Decrement',\n        },\n      ],\n      onAccessibilityAction,\n    },\n    thumbProps: !isDisabled ? moveProps : {},\n    labelProps,\n  };\n}\n"]}