{"version":3,"sources":["useMenuItem.ts"],"names":["usePress","useMenuItem","props","state","_ref","isSelected","isDisabled","onClose","closeOnSelect","onAction","pressProps","onPress","selectionManager","select","key","menuItemProps","accessibilityRole","accessibilityState","selected","disabled","labelProps","descriptionProps","keyboardShortcutProps"],"mappings":"AAEA,SAASA,QAAT,QAAyB,iCAAzB;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CACLC,KADK,EAELC,KAFK,EAGLC,IAHK,EAIS;AACd,MAAI;AACFC,IAAAA,UADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,aAAa,GAAG,IAJd;AAKFC,IAAAA;AALE,MAMAP,KANJ;AAQA,QAAM;AAAEQ,IAAAA;AAAF,MAAiBV,QAAQ,CAAC;AAC9BM,IAAAA,UAD8B;AAE9BK,IAAAA,OAAO,EAAE,MAAM;AACbR,MAAAA,KAAK,CAACS,gBAAN,CAAuBC,MAAvB,CAA8BX,KAAK,CAACY,GAApC;AACAL,MAAAA,QAAQ,IAAIA,QAAQ,CAACP,KAAK,CAACY,GAAP,CAApB;AACA,UAAIN,aAAa,IAAID,OAArB,EAA8BA,OAAO;AACtC;AAN6B,GAAD,CAA/B;AASA,SAAO;AACLQ,IAAAA,aAAa,EAAE;AACbC,MAAAA,iBAAiB,EAAE,UADN;AAEbC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,QAAQ,EAAEb,UADQ;AAElBc,QAAAA,QAAQ,EAAEb;AAFQ,OAFP;AAMb,SAAGI;AANU,KADV;AASLU,IAAAA,UAAU,EAAE,EATP;AAULC,IAAAA,gBAAgB,EAAE,EAVb;AAWLC,IAAAA,qBAAqB,EAAE;AAXlB,GAAP;AAaD","sourcesContent":["import type { Key, RefObject } from 'react';\nimport type { TreeState } from '@react-stately/tree';\nimport { usePress } from '@react-native-aria/interactions';\n\ninterface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: any;\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: any;\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: any;\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: any;\n}\n\ninterface AriaMenuItemProps {\n  /** Whether the menu item is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the menu item is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string;\n\n  /** The unique key for the menu item. */\n  'key'?: any;\n\n  /** Handler that is called when the menu should close after selecting an item. */\n  'onClose'?: () => void;\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  'closeOnSelect'?: boolean;\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  'isVirtualized'?: boolean;\n\n  /** Handler that is called when the user activates the item. */\n  'onAction'?: (key: Key) => void;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(\n  props: AriaMenuItemProps,\n  state: TreeState<T>,\n  _ref: RefObject<HTMLElement>\n): MenuItemAria {\n  let {\n    isSelected,\n    isDisabled,\n    onClose,\n    closeOnSelect = true,\n    onAction,\n  } = props;\n\n  const { pressProps } = usePress({\n    isDisabled,\n    onPress: () => {\n      state.selectionManager.select(props.key);\n      onAction && onAction(props.key);\n      if (closeOnSelect && onClose) onClose();\n    },\n  });\n\n  return {\n    menuItemProps: {\n      accessibilityRole: 'menuitem',\n      accessibilityState: {\n        selected: isSelected,\n        disabled: isDisabled,\n      },\n      ...pressProps,\n    },\n    labelProps: {},\n    descriptionProps: {},\n    keyboardShortcutProps: {},\n  };\n}\n"]}