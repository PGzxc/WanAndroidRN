"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuItem = useMenuItem;

var _collections = require("@react-stately/collections");

var _interactions = require("@react-aria/interactions");

var _interactions2 = require("@react-native-aria/interactions");

var _utils = require("@react-native-aria/utils");

var _utils2 = require("@react-aria/utils");

var _selection = require("@react-aria/selection");

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * Provides the behavior and accessibility implementation for an item in a menu.
 * See `useMenu` for more details about menus.
 * @param props - Props for the item.
 * @param state - State for the menu, as returned by `useTreeState`.
 */
function useMenuItem(props, state, ref) {
  let {
    isSelected,
    isDisabled,
    key,
    onClose,
    closeOnSelect = true,
    isVirtualized,
    onAction
  } = props;
  let role = 'menuitem';

  if (state.selectionManager.selectionMode === 'single') {
    role = 'menuitemradio';
  } else if (state.selectionManager.selectionMode === 'multiple') {
    role = 'menuitemcheckbox';
  }

  let labelId = (0, _utils2.useSlotId)();
  let descriptionId = (0, _utils2.useSlotId)();
  let keyboardId = (0, _utils2.useSlotId)();
  let ariaProps = {
    'aria-disabled': isDisabled,
    role,
    'aria-label': props['aria-label'],
    'aria-labelledby': labelId,
    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined
  };

  if (state.selectionManager.selectionMode !== 'none') {
    ariaProps['aria-checked'] = isSelected;
  }

  if (isVirtualized) {
    ariaProps['aria-posinset'] = state.collection.getItem(key).index;
    ariaProps['aria-setsize'] = (0, _collections.getItemCount)(state.collection);
  }

  let onPressStart = e => {
    if (e.pointerType === 'keyboard' && onAction) {
      onAction(key);
    }
  };

  let onPressUp = e => {
    if (e.pointerType !== 'keyboard') {
      if (onAction) {
        onAction(key);
      }

      if (closeOnSelect && onClose) {
        onClose();
      }
    }
  };

  let {
    itemProps
  } = (0, _selection.useSelectableItem)({
    selectionManager: state.selectionManager,
    key,
    ref,
    shouldSelectOnPressUp: true
  });
  let {
    pressProps
  } = (0, _interactions2.usePress)((0, _utils2.mergeProps)({
    onPressStart,
    onPressUp,
    isDisabled
  }, (0, _utils.mapDomPropsToRN)(itemProps)));
  let {
    hoverProps
  } = (0, _interactions2.useHover)({
    isDisabled,

    onHoverStart() {
      if (!(0, _interactions.isFocusVisible)()) {
        state.selectionManager.setFocused(true);
        state.selectionManager.setFocusedKey(key);
      }
    }

  }, ref);
  const {
    keyboardProps
  } = (0, _interactions.useKeyboard)({
    onKeyDown: e => {
      // Ignore repeating events, which may have started on the menu trigger before moving
      // focus to the menu item. We want to wait for a second complete key press sequence.
      if (e.repeat) {
        e.continuePropagation();
        return;
      }

      switch (e.key) {
        case ' ':
          if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {
            onClose();
          }

          break;

        case 'Enter':
          // The Enter key should always close on select, except if overridden.
          if (!isDisabled && closeOnSelect !== false && onClose) {
            onClose();
          }

          break;

        default:
          e.continuePropagation();
          break;
      }
    }
  });
  return {
    menuItemProps: { ...(0, _utils.mapDomPropsToRN)(ariaProps),
      ...(0, _utils2.mergeProps)(pressProps, hoverProps, keyboardProps),
      accessibilityRole: 'button'
    },
    labelProps: {
      nativeID: labelId
    },
    descriptionProps: {
      nativeID: descriptionId
    },
    keyboardShortcutProps: {
      nativeID: keyboardId
    }
  };
}
//# sourceMappingURL=useMenuItem.web.js.map