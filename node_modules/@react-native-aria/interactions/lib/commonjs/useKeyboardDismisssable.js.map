{"version":3,"sources":["useKeyboardDismisssable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","React","useEffect","cleanupFn","useBackHandler","backHandler","BackHandler","addEventListener","removeEventListener"],"mappings":";;;;;;;;AAAA;;AAEA;;;;;;AAOA,IAAIA,uBAAyC,GAAG,EAAhD;AACO,MAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EAAGC,OAAD,IAAwB;AAC5BH,IAAAA,uBAAuB,CAACE,IAAxB,CAA6BC,OAA7B;AACA,WAAO,MAAM;AACXH,MAAAA,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxB,CACvBC,CAAD,IAAOA,CAAC,KAAKF,OADW,CAA1B;AAGD,KAJD;AAKD,GAR0C;AAS3CG,EAAAA,MAAM,EAAE,MAAMN,uBAAuB,CAACM,MATK;AAU3CC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAOP,uBAAuB,CAACO,GAAxB,EAAP;AACD;AAZ0C,CAAtC;AAeP;AACA;AACA;;;;AACO,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAoC;AACxEC,iBAAMC,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,MAAM,CAAE,CAAxB;;AACA,QAAIJ,OAAJ,EAAa;AACXI,MAAAA,SAAS,GAAGZ,6BAA6B,CAACC,IAA9B,CAAmCQ,QAAnC,CAAZ;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS;AACV;;AACD,WAAO,MAAM;AACXA,MAAAA,SAAS;AACV,KAFD;AAGD,GAVD,EAUG,CAACJ,OAAD,EAAUC,QAAV,CAVH;;AAYAI,EAAAA,cAAc,CAAC;AAAEL,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,CAAd;AACD,CAdM;;;;AAgBA,SAASI,cAAT,CAAwB;AAAEL,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAxB,EAAwD;AAC7D,wBAAU,MAAM;AACd,QAAIK,WAAW,GAAG,MAAM;AACtBL,MAAAA,QAAQ;AACR,aAAO,IAAP;AACD,KAHD;;AAIA,QAAID,OAAJ,EAAa;AACXO,+BAAYC,gBAAZ,CAA6B,mBAA7B,EAAkDF,WAAlD;AACD,KAFD,MAEO;AACLC,+BAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD;AACD;;AACD,WAAO,MACLC,yBAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD,CADF;AAED,GAZD,EAYG,CAACN,OAAD,EAAUC,QAAV,CAZH;AAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]}