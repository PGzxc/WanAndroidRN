function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useEffect, useMemo } from 'react';
import { useStyled } from '@gluestack-style/react';
import { deepMerge, setObjectKeyValue, resolvedTokenization } from './utils';
import { propertyTokenMap } from './propertyTokenMap';
function tokenizeAnimationPropsFromConfig() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let config = arguments.length > 1 ? arguments[1] : undefined;
  let animationAliases = arguments.length > 2 ? arguments[2] : undefined;
  let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  let tokenizedAnimatedProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  for (const prop in props) {
    if (Array.isArray(props[prop])) {
      path.push(prop);
      setObjectKeyValue(tokenizedAnimatedProps, path, props[prop]);
      path.pop();
    } else if (animationAliases[prop]) {
      path.push(prop);
      const tokenizedValue = resolvedTokenization(props[prop], config);
      setObjectKeyValue(tokenizedAnimatedProps, path, tokenizedValue);
      path.pop();
    } else if (typeof props[prop] === 'object') {
      path.push(prop);
      const tokenizedValue = resolvedTokenization(props[prop], config);
      setObjectKeyValue(tokenizedAnimatedProps, path, tokenizedValue);
      // path.pop();
      tokenizeAnimationPropsFromConfig(props[prop], config, animationAliases, path, tokenizedAnimatedProps);
      path.pop();
    } else {
      path.push(prop);
      setObjectKeyValue(tokenizedAnimatedProps, path, props[prop]);
      path.pop();
    }
  }
  return tokenizedAnimatedProps;
}
function getVariantProps(props, theme) {
  const variantTypes = theme !== null && theme !== void 0 && theme.variants ? Object.keys(theme.variants) : [];
  const restProps = {
    ...props
  };
  const variantProps = {};
  variantTypes === null || variantTypes === void 0 || variantTypes.forEach(variant => {
    if (props[variant]) {
      variantProps[variant] = props[variant];
      // delete restProps[variant];
    }
  });

  return {
    variantProps,
    restProps
  };
}
function resolveVariantAnimationProps(variantProps, styledObject) {
  let resolvedVariant = {};
  Object.keys(variantProps).forEach(variant => {
    var _styledObject$variant;
    const variantValue = variantProps[variant];
    const variantObject = styledObject === null || styledObject === void 0 || (_styledObject$variant = styledObject.variants) === null || _styledObject$variant === void 0 || (_styledObject$variant = _styledObject$variant[variant]) === null || _styledObject$variant === void 0 ? void 0 : _styledObject$variant[variantValue];
    resolvedVariant = deepMerge(resolvedVariant, variantObject);
  });
  return resolvedVariant;
}
export class AnimationResolver {
  config = {
    aliases: {
      ':animate': 'animate',
      ':initial': 'initial',
      ':exit': 'exit',
      ':initialProps': 'initialProps',
      ':animateProps': 'animateProps',
      ':transition': 'transition',
      ':transformOrigin': 'transformOrigin',
      ':whileTap': 'whileTap',
      ':whileHover': 'whileHover',
      ':onAnimationComplete': 'onAnimationComplete'
    },
    tokens: {},
    animatedPropMap: {}
  };
  AnimatePresenceComp = React.Fragment;
  register(config) {
    if (this.config) {
      if (config !== null && config !== void 0 && config.aliases) {
        var _this$config;
        this.config.aliases = {
          ...((_this$config = this.config) === null || _this$config === void 0 ? void 0 : _this$config.aliases),
          ...(config === null || config === void 0 ? void 0 : config.aliases)
        };
      }
      if (config !== null && config !== void 0 && config.tokens) {
        var _this$config2;
        this.config.tokens = {
          ...((_this$config2 = this.config) === null || _this$config2 === void 0 ? void 0 : _this$config2.tokens),
          ...(config === null || config === void 0 ? void 0 : config.tokens)
        };
      }
      if (config !== null && config !== void 0 && config.animatedPropMap) {
        var _this$config3;
        this.config.animatedPropMap = {
          ...((_this$config3 = this.config) === null || _this$config3 === void 0 ? void 0 : _this$config3.animatedPropMap),
          ...(config === null || config === void 0 ? void 0 : config.animatedPropMap)
        };
      }
      // @ts-ignore
      this.config.ref = config === null || config === void 0 ? void 0 : config.ref;
    }
  }
  constructor(ComponentDriverClass) {
    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    // @ts-ignore
    const componentDriver = new ComponentDriverClass(config);
    this.name = 'AnimationResolver';
    this.componentDriver = componentDriver;
    if (componentDriver.engine.AnimatePresence) {
      this.AnimatePresenceComp = componentDriver.engine.AnimatePresence;
    }
    this.register(componentDriver.config);
  }
  #childrenExitPropsMap = {};
  #extendedConfig = {};
  inputMiddleWare() {
    var _Component$displayNam;
    let styledObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let shouldUpdateConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let _ = arguments.length > 2 ? arguments[2] : undefined;
    let Component = arguments.length > 3 ? arguments[3] : undefined;
    if (Component && ((_Component$displayNam = Component.displayName) !== null && _Component$displayNam !== void 0 && _Component$displayNam.startsWith('Gluestack-AnimatedResolver-Animated') ||
    // @ts-ignore
    Component.isAnimatedComponent)) {
      var _Component$displayNam2;
      let AnimatedComponent = this.componentDriver.engine[// @ts-ignore
      (_Component$displayNam2 = Component.displayName) === null || _Component$displayNam2 === void 0 ? void 0 : _Component$displayNam2.replace('Gluestack-AnimatedResolver-Animated', '')];
      if (AnimatedComponent) {
        AnimatedComponent.isAnimatedComponent = true;
      }
      if (!AnimatedComponent) {
        AnimatedComponent = Component;
      }

      // this.#childrenExitPropsMap = deepClone(styledObj);
      const resolvedAnimatedProps = this.updateStyledObject(styledObj, shouldUpdateConfig);
      const resolvedStyledObjectWithAnimatedProps = deepMerge(styledObj, resolvedAnimatedProps);

      // if (shouldUpdateConfig) {
      //   // @ts-ignore
      //   return [styledObj, shouldUpdateConfig, _, AnimatedComponent];
      // }

      // @ts-ignore

      return [resolvedStyledObjectWithAnimatedProps, shouldUpdateConfig, _, AnimatedComponent];
    }
    // @ts-ignore
    return [styledObj, shouldUpdateConfig, _, Component];
  }
  updateStyledObject() {
    var _this$config4, _this$config5;
    let styledObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let shouldUpdateConfig = arguments.length > 1 ? arguments[1] : undefined;
    let resolvedStyledObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let keyPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    const aliases = (_this$config4 = this.config) === null || _this$config4 === void 0 ? void 0 : _this$config4.aliases;
    const animatedPropMap = (_this$config5 = this.config) === null || _this$config5 === void 0 ? void 0 : _this$config5.animatedPropMap;
    for (const prop in styledObject) {
      if (aliases && aliases !== null && aliases !== void 0 && aliases[prop]) {
        let isStyleKey = false;
        if (shouldUpdateConfig) {
          // this.#childrenExitPropsMap[prop] = styledObject[prop];
          if (keyPath[keyPath.length - 1] === 'style') {
            isStyleKey = true;
            keyPath.pop();
          }
          setObjectKeyValue(this.#childrenExitPropsMap, [...keyPath, prop], styledObject[prop]);
        }
        const value = styledObject[prop];

        // @ts-ignore
        keyPath.push('props', aliases[prop]);
        // setObjectKeyValue(resolvedStyledObject, keyPath, value);

        setObjectKeyValue(resolvedStyledObject, keyPath, value);
        keyPath.pop();
        keyPath.pop();
        if (isStyleKey) keyPath.push('style');
        delete styledObject[prop];
      } else if (typeof styledObject[prop] === 'object') {
        keyPath.push(prop);
        this.updateStyledObject(styledObject[prop], shouldUpdateConfig, resolvedStyledObject, keyPath);
        keyPath.pop();
      }

      // @ts-ignore

      if (animatedPropMap && animatedPropMap[prop]) {
        this.renameObjectKey(styledObject, prop, animatedPropMap[prop]);
      }
    }
    return resolvedStyledObject;
  }
  renameObjectKey(obj, from, to) {
    obj[to] = obj[from];
    delete obj[from];
    return obj;
  }
  componentMiddleWare(_ref) {
    let {
      Component,
      ExtendedConfig
    } = _ref;
    if (Component && Component !== null && Component !== void 0 && Component.isAnimatedComponent) {
      const styledConfig = this.#childrenExitPropsMap;
      this.#childrenExitPropsMap = {};
      const NewComponent = /*#__PURE__*/React.forwardRef((props, ref) => {
        var _this$config6;
        const {
          sx,
          ...rest
        } = props;
        const styledContext = useStyled();
        useEffect(() => {
          if (!styledContext.animationDriverData) {
            styledContext.setAnimationDriverData(this.componentDriver);
          }
        }, [styledContext]);
        const CONFIG = useMemo(() => ({
          ...styledContext.config,
          propertyTokenMap
        }), [styledContext.config]);
        this.#extendedConfig = CONFIG;
        if (ExtendedConfig) {
          this.#extendedConfig = deepMerge(CONFIG, ExtendedConfig);
        }
        let tokenizedAnimatedProps = {};
        const {
          variantProps,
          restProps
        } = getVariantProps(rest, styledConfig);
        const variantStyledObject = resolveVariantAnimationProps(variantProps, styledConfig);
        const componentStyledObject = deepMerge(variantStyledObject, styledConfig);
        const animationAliases = (_this$config6 = this.config) === null || _this$config6 === void 0 ? void 0 : _this$config6.aliases;
        const config = this.#extendedConfig;
        tokenizedAnimatedProps = tokenizeAnimationPropsFromConfig(componentStyledObject, config, animationAliases);
        const tokenizedSxAnimationProps = tokenizeAnimationPropsFromConfig(sx, config, animationAliases);
        const mergedAnimatedProps = deepMerge(tokenizedAnimatedProps, tokenizedSxAnimationProps);

        // @ts-ignore
        const [resolvedAnimatedStyledWithStyledObject,,,] = this.inputMiddleWare(mergedAnimatedProps, false, false, Component);
        let isState = false;
        Object.keys((restProps === null || restProps === void 0 ? void 0 : restProps.states) ?? {}).forEach(state => {
          isState = restProps.states[state] ? true : false;
        });
        const animatedProps = !isState ? // @ts-ignore
        resolvedAnimatedStyledWithStyledObject === null || resolvedAnimatedStyledWithStyledObject === void 0 ? void 0 : resolvedAnimatedStyledWithStyledObject.props : {};
        return /*#__PURE__*/React.createElement(Component, _extends({}, animatedProps, restProps, {
          ref: ref
        }));
      });
      if (NewComponent) {
        var _Component$styled;
        //@ts-ignore
        NewComponent.styled = {};
        //@ts-ignore
        NewComponent.styled.config = {};

        //@ts-ignore
        NewComponent.styled.config = {
          ...(Component === null || Component === void 0 || (_Component$styled = Component.styled) === null || _Component$styled === void 0 ? void 0 : _Component$styled.config),
          ...styledConfig
        };
        //@ts-ignore
        NewComponent.isStyledComponent = Component === null || Component === void 0 ? void 0 : Component.isStyledComponent;
        //@ts-ignore
        NewComponent.isComposedComponent = Component === null || Component === void 0 ? void 0 : Component.isComposedComponent;
        NewComponent.displayName = Component === null || Component === void 0 ? void 0 : Component.displayName;
        return NewComponent;
      }
    } else {
      return Component;
    }
  }
}
export * from './AnimatedComponents';
//# sourceMappingURL=index.js.map