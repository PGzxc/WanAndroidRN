"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setObjectKeyValue = exports.getObjectProperty = exports.getObjectParentProperty = exports.deepMerge = void 0;
const getObjectProperty = (object, keyPath) => {
  if (!Array.isArray(keyPath)) {
    keyPath = [keyPath];
  }
  return keyPath.reduce((baseObj, key) => baseObj && baseObj[key], object);
};
exports.getObjectProperty = getObjectProperty;
const setObjectKeyValue = (obj, keys, value) => {
  var _keys;
  if (!Array.isArray(keys)) {
    keys = [keys];
  }
  let current = obj;
  (_keys = keys) === null || _keys === void 0 || _keys.forEach((key, index) => {
    var _keys2;
    if (index === ((_keys2 = keys) === null || _keys2 === void 0 ? void 0 : _keys2.length) - 1) {
      current[key] = value;
    } else {
      if (!current[key]) {
        current[key] = {};
      }
      current = current[key];
    }
  });
  return obj;
};
exports.setObjectKeyValue = setObjectKeyValue;
const getObjectParentProperty = function (obj, key) {
  let prevKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  for (const prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      if (prop === key) {
        return prevKey;
      }
      if (obj[prop] && typeof obj[prop] === 'object') {
        const result = getObjectParentProperty(obj[prop], key, prop);
        if (result) {
          return result;
        }
      }
    }
  }
  return null;
};
exports.getObjectParentProperty = getObjectParentProperty;
const deepMerge = function () {
  let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let source = arguments.length > 1 ? arguments[1] : undefined;
  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      if (typeof target[key] === 'object' && typeof source[key] === 'object') {
        deepMerge(target[key], source[key]);
      } else {
        target[key] = source[key];
      }
    }
  }
  return target;
};
exports.deepMerge = deepMerge;
//# sourceMappingURL=utils.js.map