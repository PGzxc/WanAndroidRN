"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preprocess = exports.createTextShadowValue = exports.createBoxShadowValue = void 0;
var _normalizeColor = _interopRequireDefault(require("./normalizeColor"));
var _normalizeValueWithProperty = _interopRequireDefault(require("./normalizeValueWithProperty"));
var _styledSystem = require("../../../../core/styled-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const defaultOffset = {
  height: 0,
  width: 0
};
const createBoxShadowValue = style => {
  const {
    shadowColor,
    shadowOffset,
    shadowOpacity,
    shadowRadius
  } = style;
  const {
    height,
    width
  } = shadowOffset || defaultOffset;
  const offsetX = (0, _normalizeValueWithProperty.default)(width);
  const offsetY = (0, _normalizeValueWithProperty.default)(height);
  const blurRadius = (0, _normalizeValueWithProperty.default)(shadowRadius || 0);
  const color = (0, _normalizeColor.default)(shadowColor || 'black', shadowOpacity);
  if (color != null && offsetX != null && offsetY != null && blurRadius != null) {
    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;
  }
};
exports.createBoxShadowValue = createBoxShadowValue;
const createTextShadowValue = style => {
  const {
    textShadowColor,
    textShadowOffset,
    textShadowRadius
  } = style;
  const {
    height,
    width
  } = textShadowOffset || defaultOffset;
  const radius = textShadowRadius || 0;
  const offsetX = (0, _normalizeValueWithProperty.default)(width);
  const offsetY = (0, _normalizeValueWithProperty.default)(height);
  const blurRadius = (0, _normalizeValueWithProperty.default)(radius);
  const color = (0, _normalizeValueWithProperty.default)(textShadowColor, 'textShadowColor');
  if (color && (height !== 0 || width !== 0 || radius !== 0) && offsetX != null && offsetY != null && blurRadius != null) {
    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;
  }
};
exports.createTextShadowValue = createTextShadowValue;
const getResetValue = (propName, propValue) => {
  // @ts-ignore
  return _styledSystem.CSSPropertiesMap[propName] || propValue;
};
/**
 * Preprocess styles
 */
const preprocess = originalStyle => {
  const style = originalStyle || {};
  const nextStyle = {};
  for (const originalProp in style) {
    const originalValue = typeof style[originalProp] !== 'undefined' ? style[originalProp] : getResetValue(originalProp, style[originalProp]);
    let prop = originalProp;
    let value = originalValue;
    if (!Object.prototype.hasOwnProperty.call(style, originalProp) || originalValue == null) {
      continue;
    }
    if (prop === 'elevation') continue;
    // Convert shadow styles
    if (prop === 'shadowColor' || prop === 'shadowOffset' || prop === 'shadowOpacity' || prop === 'shadowRadius') {
      const boxShadowValue = createBoxShadowValue(style);
      if (boxShadowValue != null && nextStyle.boxShadow == null) {
        const {
          boxShadow
        } = style;
        prop = 'boxShadow';
        value = boxShadow ? `${boxShadow}, ${boxShadowValue}` : boxShadowValue;
      } else {
        continue;
      }
    }

    // Convert text shadow styles
    if (prop === 'textShadowColor' || prop === 'textShadowOffset' || prop === 'textShadowRadius') {
      const textShadowValue = createTextShadowValue(style);
      if (textShadowValue != null && nextStyle.textShadow == null) {
        const {
          textShadow
        } = style;
        prop = 'textShadow';
        value = textShadow ? `${textShadow}, ${textShadowValue}` : textShadowValue;
      } else {
        continue;
      }
    }
    nextStyle[prop] = value;
  }

  // $FlowIgnore
  return nextStyle;
};
exports.preprocess = preprocess;
//# sourceMappingURL=preprocess.js.map