"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateOrderUnResolvedMap = updateOrderUnResolvedMap;
var _getComponentStyle = require("./resolver/getComponentStyle");
var _getStyleIds = require("./resolver/getStyleIds");
var _orderedResolved = require("./resolver/orderedResolved");
var _styledResolved = require("./resolver/styledResolved");
var _updateCSSStyleInOrderedResolved = require("./updateCSSStyleInOrderedResolved.web");
var _styleSheet = require("./style-sheet");
function updateOrderUnResolvedMap(theme, componentHash, declarationType, ExtendedConfig) {
  let _GluestackStyleSheet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _styleSheet.GluestackStyleSheet;
  let platform = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
  const prefixClassName = declarationType === 'inline' ? 'gs' : '';
  const shouldGuessDescendants = declarationType === 'inline' || declarationType === 'extended' ? true : false;
  const unresolvedTheme = (0, _styledResolved.styledToStyledResolved)(theme, [], {}, false);
  const orderedUnResolvedTheme = (0, _orderedResolved.styledResolvedToOrderedSXResolved)(unresolvedTheme);

  // platform is useful incase of Babel plugin
  if (platform === 'all') {
    (0, _updateCSSStyleInOrderedResolved.INTERNAL_updateCSSStyleInOrderedResolved)(orderedUnResolvedTheme, componentHash, true, prefixClassName, false);
  } else if (platform === 'web') {
    (0, _updateCSSStyleInOrderedResolved.INTERNAL_updateCSSStyleInOrderedResolved)(orderedUnResolvedTheme, componentHash, false, prefixClassName, false);
  } else {
    (0, _updateCSSStyleInOrderedResolved.INTERNAL_updateCSSStyleInOrderedResolved)(orderedUnResolvedTheme, componentHash, true, prefixClassName, false);
  }

  // base style
  const [componentOrderResolvedBaseStyle, componentOrderResolvedBaseStateStyle] = (0, _getComponentStyle.getComponentResolvedBaseStyle)(orderedUnResolvedTheme);
  const componentBaseStyleIds = _GluestackStyleSheet.declare(componentOrderResolvedBaseStyle, declarationType === 'global' ? declarationType : declarationType + '-base', componentHash ? componentHash : 'css-injected-boot-time', ExtendedConfig);
  const componentBaseStyleStateIds = _GluestackStyleSheet.declare(componentOrderResolvedBaseStateStyle, declarationType === 'global' ? declarationType : declarationType + '-base-state', componentHash ? componentHash : 'css-injected-boot-time', ExtendedConfig);

  // descendant base style

  const [descendantOrderResolvedBaseStyle, descendantOrderResolvedBaseStateStyle] = (0, _getComponentStyle.getDescendantResolvedBaseStyle)(orderedUnResolvedTheme);
  const descendantBaseStyleIds = _GluestackStyleSheet.declare(descendantOrderResolvedBaseStyle, declarationType === 'global' ? declarationType : declarationType + '-descendant-base', componentHash ? componentHash : 'css-injected-boot-time-descendant', ExtendedConfig);
  const descendantBaseStateStyleIds = _GluestackStyleSheet.declare(descendantOrderResolvedBaseStateStyle, declarationType === 'global' ? declarationType : declarationType + '-descendant-base-state', componentHash ? componentHash : 'css-injected-boot-time-descendant', ExtendedConfig);

  // variant style
  const [componentOrderResolvedVariantStyle, componentOrderResolvedVariantStateStyle] = (0, _getComponentStyle.getComponentResolvedVariantStyle)(orderedUnResolvedTheme);
  const componentVariantStyleIds = _GluestackStyleSheet.declare(componentOrderResolvedVariantStyle, declarationType === 'global' ? declarationType : declarationType + '-variant', componentHash ? componentHash : 'css-injected-boot-time', ExtendedConfig);
  const componentVariantStateStyleIds = _GluestackStyleSheet.declare(componentOrderResolvedVariantStateStyle, declarationType === 'global' ? declarationType : declarationType + '-variant-state', componentHash ? componentHash : 'css-injected-boot-time', ExtendedConfig);

  // descendant variant style
  const [descendantOrderResolvedVariantStyle, descendantOrderResolvedVariantStateStyle] = (0, _getComponentStyle.getDescendantResolvedVariantStyle)(orderedUnResolvedTheme);
  const descendantVariantStyleIds = _GluestackStyleSheet.declare(descendantOrderResolvedVariantStyle, declarationType === 'global' ? declarationType : declarationType + '-descendant-variant', componentHash ? componentHash : 'css-injected-boot-time-descendant', ExtendedConfig);
  const descendantVariantStateStyleIds = _GluestackStyleSheet.declare(descendantOrderResolvedVariantStateStyle, declarationType === 'global' ? declarationType : declarationType + '-descendant-variant-state', componentHash ? componentHash : 'css-injected-boot-time-descendant', ExtendedConfig);
  const styleCSSIdsArr = [...componentBaseStyleIds, ...componentBaseStyleStateIds, ...descendantBaseStyleIds, ...descendantBaseStateStyleIds, ...componentVariantStyleIds, ...componentVariantStateStyleIds, ...descendantVariantStyleIds, ...descendantVariantStateStyleIds];
  const verbosedStyleIds = (0, _getStyleIds.getStyleIds)(orderedUnResolvedTheme, ExtendedConfig, shouldGuessDescendants);
  return {
    styledIds: styleCSSIdsArr,
    verbosedStyleIds
  };
}
//# sourceMappingURL=updateOrderUnResolvedMap.js.map