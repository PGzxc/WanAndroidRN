"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddCssTokenVariables = void 0;
var _utils = require("../utils");
var _cssInjector = require("../utils/css-injector");
var _react = _interopRequireWildcard(require("react"));
var _StyledProvider = require("../StyledProvider");
var _propertyTokenMap = require("../propertyTokenMap");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
class AddCssTokenVariables {
  styledUtils = {};
  register(styledUtils) {
    if (this.styledUtils) {
      var _this$styledUtils, _this$styledUtils2;
      this.styledUtils.aliases = {
        ...((_this$styledUtils = this.styledUtils) === null || _this$styledUtils === void 0 ? void 0 : _this$styledUtils.aliases),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.aliases)
      };
      this.styledUtils.tokens = {
        ...((_this$styledUtils2 = this.styledUtils) === null || _this$styledUtils2 === void 0 ? void 0 : _this$styledUtils2.tokens),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.tokens)
      };
      this.styledUtils.ref = styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.ref;
    }
    // this.styledUtils = styledUtils;
  }

  constructor(styledUtils) {
    this.register(styledUtils);
    this.name = 'AddCssTokenVariables';
  }
  createCssVariables(tokens) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gluestack-';
    let cssVariables = '';
    for (const [key, value] of Object.entries(tokens)) {
      const variableName = `${prefix}${key}`;
      if (typeof value === 'object') {
        cssVariables += this.createCssVariables(value, `${variableName}-`);
      } else {
        cssVariables += `--${variableName}: ${value};\n`;
      }
    }
    return cssVariables;
  }
  injectCssVariablesGlobalStyle(componentExtendedConfig) {
    (0, _cssInjector.injectGlobalCss)(`:root {${this.createCssVariables(componentExtendedConfig.tokens)}\n};`);
  }
  componentMiddleWare(_ref) {
    let {
      NewComp,
      extendedConfig
    } = _ref;
    return /*#__PURE__*/_react.default.forwardRef((props, ref) => {
      const styledContext = (0, _StyledProvider.useStyled)();
      const CONFIG = (0, _react.useMemo)(() => ({
        ...styledContext.config,
        propertyTokenMap: _propertyTokenMap.propertyTokenMap
      }), [styledContext.config]);
      let componentExtendedConfig = CONFIG;
      if (extendedConfig) {
        componentExtendedConfig = (0, _utils.deepMerge)(CONFIG, extendedConfig);
      }
      this.injectCssVariablesGlobalStyle(componentExtendedConfig);
      return /*#__PURE__*/_react.default.createElement(NewComp, _extends({
        ref: ref
      }, props));
    });
  }
  inputMiddleWare(styledObj) {
    return styledObj;
  }
}
exports.AddCssTokenVariables = AddCssTokenVariables;
//# sourceMappingURL=css-variables.js.map