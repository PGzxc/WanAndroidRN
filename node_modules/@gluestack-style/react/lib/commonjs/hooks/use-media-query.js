"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
const isNil = value => {
  return value === null || value === undefined;
};
const calculateQuery = (key, val, height, width) => {
  let retval;
  if (isNil(width) || isNil(height) || isNil(val)) {
    return;
  }
  switch (key) {
    case 'maxWidth':
      // @ts-ignore
      retval = !isNil(val) ? width <= val : undefined;
      break;
    case 'minWidth':
      // @ts-ignore
      retval = !isNil(val) ? width >= val : undefined;
      break;
    case 'maxHeight':
      // @ts-ignore
      retval = !isNil(val) ? height <= val : undefined;
      break;
    case 'minHeight':
      // @ts-ignore
      retval = !isNil(val) ? height >= val : undefined;
      break;
    case 'orientation':
      if (!isNil(val)) {
        // @ts-ignore
        if (width > height) {
          retval = val === 'landscape';
        } else {
          retval = val === 'portrait';
        }
      }
      break;
    default:
      break;
  }
  return retval;
};
const queryResolver = (query, width, height) => {
  for (const queryKey in query) {
    if (!calculateQuery(queryKey, query[queryKey], height, width)) {
      return false;
    }
  }
  return true;
};
const iterateQuery = (query, height, width) => {
  const queryResults = [];
  if (Array.isArray(query)) {
    query.forEach(subQuery => {
      queryResults.push(queryResolver(subQuery, width, height));
    });
  } else {
    queryResults.push(queryResolver(query, width, height));
  }
  return queryResults;
};
const useMediaQuery = query => {
  const dims = (0, _reactNative.useWindowDimensions)();
  const height = dims === null || dims === void 0 ? void 0 : dims.height;
  const width = dims === null || dims === void 0 ? void 0 : dims.width;
  return iterateQuery(query, height, width);
};
var _default = useMediaQuery;
exports.default = _default;
//# sourceMappingURL=use-media-query.js.map