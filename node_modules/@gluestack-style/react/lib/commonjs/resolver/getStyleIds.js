"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getComponentResolved = getComponentResolved;
exports.getComponentStyleIds = getComponentStyleIds;
exports.getDescendantResolved = getDescendantResolved;
exports.getDescendantStyleIds = getDescendantStyleIds;
exports.getStyleIds = getStyleIds;
var _checkAndPush = require("./checkAndPush");
function getComponentResolved(orderedResolved) {
  return orderedResolved.filter(item => {
    var _item$meta$path;
    return !((_item$meta$path = item.meta.path) !== null && _item$meta$path !== void 0 && _item$meta$path.includes('descendants'));
  });
}
function getDescendantResolved(orderedResolved) {
  return orderedResolved.filter(item => {
    var _item$meta$path2;
    return (_item$meta$path2 = item.meta.path) === null || _item$meta$path2 === void 0 ? void 0 : _item$meta$path2.includes('descendants');
  });
}
function getComponentStyleIds(arr) {
  const ret = {
    baseStyle: {},
    variants: {},
    compoundVariants: []
    // sizes: {},
  };

  for (let i in arr) {
    var _item$meta, _item$meta2;
    const item = arr[i];
    (0, _checkAndPush.checkAndPush)(item, ret.baseStyle, 'baseStyle');
    let variantType = '';
    let variantName = '';
    if (item !== null && item !== void 0 && (_item$meta = item.meta) !== null && _item$meta !== void 0 && (_item$meta = _item$meta.path) !== null && _item$meta !== void 0 && _item$meta.includes('variants')) {
      variantType = item.meta.path[item.meta.path.indexOf('variants') + 1];
      variantName = item.meta.path[item.meta.path.indexOf('variants') + 2];
      if (!ret.variants[variantType]) {
        ret.variants[variantType] = {
          [variantName]: {
            ids: []
          }
        };
      } else if (ret.variants[variantType] && !ret.variants[variantType][variantName]) {
        ret.variants[variantType][variantName] = {
          ids: []
        };
      }
      (0, _checkAndPush.checkAndPush)(item, ret.variants[variantType][variantName], 'variants');
      // console.log('styleids>>Var', ret);
    }

    // if (item?.meta?.path?.includes('variants')) {
    //   variantType = item.meta.path[item.meta.path.indexOf('variants') + 1];
    //   variantName = item.meta.path[item.meta.path.indexOf('variants') + 2];

    //   if (!ret.variants[variantType]) {
    //     ret.variants[variantType] = { [variantName]: { ids: [] } };
    //   } else if (
    //     ret.variants[variantType] &&
    //     !ret.variants[variantType][[variantName]]
    //   ) {
    //     ret.variants[variantType][variantName] = { ids: [] };
    //   }

    //   checkAndPush(item, ret.variants[variantType][variantName], 'variants');
    // }

    if (item !== null && item !== void 0 && (_item$meta2 = item.meta) !== null && _item$meta2 !== void 0 && (_item$meta2 = _item$meta2.path) !== null && _item$meta2 !== void 0 && _item$meta2.includes('compoundVariants')) {
      var _item$meta3;
      // let conditionStartIndex = item.meta.path.indexOf('compoundVariants');
      // let condition = {} as any;

      // for (let i = conditionStartIndex + 1; i < item.meta.path.length; i++) {
      //   if ((i - conditionStartIndex) % 2 !== 0) {
      //     condition[item.meta.path[i]] = item.meta.path[i + 1];
      //     i++;
      //   }
      // }

      // console.log(condition, item.meta, 'hello world');
      // console.log('styleids>>', ret.compoundVariants);

      // if (ret.compoundVariants.length === 0)
      //   ret.compoundVariants = [{ ids: [], n: 'alsjnf' }];

      const condition = item === null || item === void 0 || (_item$meta3 = item.meta) === null || _item$meta3 === void 0 ? void 0 : _item$meta3.condition;
      let conditionIndex = ret.compoundVariants.findIndex(item => item.condition === condition);
      // if (
      //   ret.compoundVariants.findIndex((item) => item.condition === condition) >
      //   -1
      // ) {
      // }

      if (conditionIndex === -1) {
        var _item$meta4;
        ret.compoundVariants.push({
          condition: item === null || item === void 0 || (_item$meta4 = item.meta) === null || _item$meta4 === void 0 ? void 0 : _item$meta4.condition
        });
        conditionIndex = ret.compoundVariants.length - 1;
      }
      // console.log('>>>><<<<<', conditionIndex);

      (0, _checkAndPush.checkAndPush)(item, ret.compoundVariants[conditionIndex], 'compoundVariants');

      // checkAndPush(item, ret.compoundVariants, 'compoundVariants');
      // console.log('styleids>>', ret.compoundVariants);
    }
  }

  return ret;
}
function getDescendantStyleIds(arr) {
  let descendantStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let shoudGuessDescendants = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const ret = {};
  const extractedDescendants = new Set(descendantStyle);
  if (shoudGuessDescendants) {
    arr.forEach(item => {
      if (item.meta.path.lastIndexOf('descendants') !== -1) {
        const descendant = item.meta.path[item.meta.path.lastIndexOf('descendants') + 1];
        extractedDescendants.add(descendant);
      }
    });
  }
  extractedDescendants.forEach(style => {
    const filteredOrderListByDescendant = arr.filter(item => item.meta.path[item.meta.path.lastIndexOf('descendants') + 1] === style);
    ret[style] = getComponentStyleIds(filteredOrderListByDescendant);
  });

  // return ret;

  return ret;
}
function getStyleIds(orderedResolved) {
  let componentStyleConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let shoudGuessDescendants = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const componentOrderResolved = getComponentResolved(orderedResolved);
  const descendantOrderResolved = getDescendantResolved(orderedResolved);
  const component = getComponentStyleIds(componentOrderResolved);
  const descendant = getDescendantStyleIds(descendantOrderResolved, componentStyleConfig.descendantStyle, shoudGuessDescendants);
  return {
    component,
    descendant
  };
}
//# sourceMappingURL=getStyleIds.js.map