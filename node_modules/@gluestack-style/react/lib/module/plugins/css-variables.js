function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { deepMerge } from '../utils';
import { injectGlobalCss } from '../utils/css-injector';
import React, { useMemo } from 'react';
import { useStyled } from '../StyledProvider';
import { propertyTokenMap } from '../propertyTokenMap';
export class AddCssTokenVariables {
  styledUtils = {};
  register(styledUtils) {
    if (this.styledUtils) {
      var _this$styledUtils, _this$styledUtils2;
      this.styledUtils.aliases = {
        ...((_this$styledUtils = this.styledUtils) === null || _this$styledUtils === void 0 ? void 0 : _this$styledUtils.aliases),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.aliases)
      };
      this.styledUtils.tokens = {
        ...((_this$styledUtils2 = this.styledUtils) === null || _this$styledUtils2 === void 0 ? void 0 : _this$styledUtils2.tokens),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.tokens)
      };
      this.styledUtils.ref = styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.ref;
    }
    // this.styledUtils = styledUtils;
  }

  constructor(styledUtils) {
    this.register(styledUtils);
    this.name = 'AddCssTokenVariables';
  }
  createCssVariables(tokens) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gluestack-';
    let cssVariables = '';
    for (const [key, value] of Object.entries(tokens)) {
      const variableName = `${prefix}${key}`;
      if (typeof value === 'object') {
        cssVariables += this.createCssVariables(value, `${variableName}-`);
      } else {
        cssVariables += `--${variableName}: ${value};\n`;
      }
    }
    return cssVariables;
  }
  injectCssVariablesGlobalStyle(componentExtendedConfig) {
    injectGlobalCss(`:root {${this.createCssVariables(componentExtendedConfig.tokens)}\n};`);
  }
  componentMiddleWare(_ref) {
    let {
      NewComp,
      extendedConfig
    } = _ref;
    return /*#__PURE__*/React.forwardRef((props, ref) => {
      const styledContext = useStyled();
      const CONFIG = useMemo(() => ({
        ...styledContext.config,
        propertyTokenMap
      }), [styledContext.config]);
      let componentExtendedConfig = CONFIG;
      if (extendedConfig) {
        componentExtendedConfig = deepMerge(CONFIG, extendedConfig);
      }
      this.injectCssVariablesGlobalStyle(componentExtendedConfig);
      return /*#__PURE__*/React.createElement(NewComp, _extends({
        ref: ref
      }, props));
    });
  }
  inputMiddleWare(styledObj) {
    return styledObj;
  }
}
//# sourceMappingURL=css-variables.js.map