import { SXResolvedToOrderedSXResolved } from './SXResolvedToOrderedSXResolved';
export function styledResolvedToOrderedSXResolved(styledResolved) {
  const orderedSXResolved = [
  //@ts-ignore
  ...SXResolvedToOrderedSXResolved(styledResolved === null || styledResolved === void 0 ? void 0 : styledResolved.baseStyle)];
  if (styledResolved.variants) {
    Object.keys(styledResolved.variants).forEach(key => {
      //@ts-ignore
      const variantSXResolved = styledResolved === null || styledResolved === void 0 ? void 0 : styledResolved.variants[key];
      // variantSXResolved.styledValueResolvedWithMeta.meta.weight =
      //   STYLED_PRECENDENCE.variants;
      Object.keys(variantSXResolved).forEach(variantKey => {
        // @ts-ignore
        const variantValueSXResolved = variantSXResolved[variantKey];
        orderedSXResolved.push(...SXResolvedToOrderedSXResolved(variantValueSXResolved));
      });
    });
  }
  if (styledResolved.compoundVariants) {
    styledResolved.compoundVariants.forEach(compoundVariant => {
      orderedSXResolved.push(...SXResolvedToOrderedSXResolved(compoundVariant));
    });
  }
  return orderedSXResolved.sort((a, b) => a.meta.weight - b.meta.weight);
}
//# sourceMappingURL=orderedResolved.js.map