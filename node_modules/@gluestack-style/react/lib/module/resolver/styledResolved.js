import { reduceAndResolveCompoundVariants } from './reduceAndResolveCompoundVariants';
import { sxToSXResolved } from './sxToSxResolved';
export function styledToStyledResolved(styled) {
  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let CONFIG = arguments.length > 2 ? arguments[2] : undefined;
  let shouldResolve = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return {
    baseStyle: styled !== null && styled !== void 0 && styled.baseStyle ?
    //@ts-ignore
    sxToSXResolved(styled.baseStyle, [...path, 'baseStyle'], {}, CONFIG, shouldResolve) : undefined,
    variants: styled !== null && styled !== void 0 && styled.variants ? Object.keys(styled.variants).reduce((acc, key1) => {
      var _styled$variants;
      return {
        ...acc,
        // @ts-ignore
        [key1]: Object.keys(styled === null || styled === void 0 || (_styled$variants = styled.variants) === null || _styled$variants === void 0 ? void 0 : _styled$variants[key1]).reduce((acc, key) => ({
          ...acc,
          [key]: sxToSXResolved(
          //@ts-ignore
          styled.variants[key1][key], [...path, 'variants', key1, key], {}, CONFIG, shouldResolve)
        }), {})

        // sxToSXResolved(
        //   //@ts-ignore
        //   styled.variants[key],
        //   [...path, 'variants', key],
        //   {},
        //   CONFIG
        // ),
      };
    }, {}) : undefined,
    // @ts-ignore
    compoundVariants: styled !== null && styled !== void 0 && styled.compoundVariants ? reduceAndResolveCompoundVariants(
    // @ts-ignore
    styled.compoundVariants, path, CONFIG, shouldResolve) : undefined
  };
}
//# sourceMappingURL=styledResolved.js.map