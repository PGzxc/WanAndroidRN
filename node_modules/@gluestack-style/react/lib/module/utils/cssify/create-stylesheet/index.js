import createDeclarationBlock from '../utils/create-declaration-block';
import { deepClone, createCssRule, createQuery } from '../utils/common';
const createStyleSheet = function (stylesObject) {
  let dataHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'media';
  let prefixClassName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  let hasState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  let prefixColorMode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'gs-';
  if (!stylesObject) return {
    ids: {},
    styles: {},
    fullStyles: {}
  };
  let ids = {};
  let rules = {};
  const cleanStyles = deepClone(stylesObject);
  Object.keys(stylesObject).map(key => {
    var _ids;
    if (!(stylesObject !== null && stylesObject !== void 0 && stylesObject[key])) return;
    let {
      condition,
      colorMode,
      style,
      themeCondition
    } = stylesObject[key];
    const mediaQuery = createQuery(condition);
    let finalColorMode = typeof colorMode === 'string' ? colorMode : condition === null || condition === void 0 ? void 0 : condition.colorMode;
    const colorSchemeQuery = createQuery(finalColorMode);
    const css = createDeclarationBlock(style);
    const themeCssObj = {};
    if (themeCondition) {
      Object.keys(themeCondition).forEach(themeName => {
        const themeConditionValue = themeCondition[themeName];
        themeCssObj[themeName] = createDeclarationBlock(themeConditionValue);
      });
    }
    // console.log(css, style, 'css', mediaQuery, 'mediaQuery', colorSchemeQuery);

    // const stringHash = `cssinjected-${hash(`${key}${css}`)}`;

    const rule = createCssRule(mediaQuery, colorSchemeQuery, finalColorMode, dataHash, css, 'style', prefixClassName, prefixColorMode, hasState, themeCondition, themeCssObj);
    delete cleanStyles[key];
    ids = {
      ...ids,
      [key]: `${(_ids = ids) !== null && _ids !== void 0 && _ids[key] ? ids[key] + ' ' : ''}${dataHash}`
    };
    rules = {
      ...rules,
      [key]: rule
    };
  });
  // console.log(rules, 'ids here');

  return {
    ids,
    rules,
    styles: cleanStyles,
    fullStyles: stylesObject
  };
};
export default createStyleSheet;
//# sourceMappingURL=index.js.map