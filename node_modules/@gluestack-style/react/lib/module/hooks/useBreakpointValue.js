import { useWindowDimensions } from 'react-native';
import { useStyled } from '../StyledProvider';
import { isValidBreakpoint } from '../generateStylePropsFromCSSIds';
import { extractWidthValues } from '../utils';
function getLastValidObject(mediaQueries) {
  for (let i = mediaQueries.length - 1; i >= 0; i--) {
    if (mediaQueries[i].isValid) {
      return mediaQueries[i];
    }
  }
  return null; // No valid object found
}

export function useBreakpointValue(values) {
  var _theme$config;
  let {
    width
  } = useWindowDimensions();
  const theme = useStyled();
  const mediaQueries = theme === null || theme === void 0 || (_theme$config = theme.config) === null || _theme$config === void 0 || (_theme$config = _theme$config.tokens) === null || _theme$config === void 0 ? void 0 : _theme$config.mediaQueries;
  let mediaQueriesBreakpoints = [];
  Object.keys(mediaQueries).forEach(key => {
    const currentBreakpoint = extractWidthValues(mediaQueries[key]);
    const isValid = isValidBreakpoint(theme.config, mediaQueries[key], width);
    mediaQueriesBreakpoints.push({
      key: key,
      breakpoint: currentBreakpoint[0],
      query: mediaQueries[key],
      isValid: isValid
    });
  });
  mediaQueriesBreakpoints.sort((a, b) => a.breakpoint - b.breakpoint);
  mediaQueriesBreakpoints.forEach((breakpoint, index) => {
    breakpoint.value = values.hasOwnProperty(breakpoint.key) ? values[breakpoint.key] : mediaQueriesBreakpoints[index - 1].value;
  });
  const lastValidObject = getLastValidObject(mediaQueriesBreakpoints);
  if (!lastValidObject) {
    return values;
  }
  return lastValidObject.value;
}
//# sourceMappingURL=useBreakpointValue.js.map