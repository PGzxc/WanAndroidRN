// import { stableHash } from './stableHash';

// --------------------------------- 3. Preparing style map for Css Injection based on precedence --------------------------------------

export const setObjectKeyValue = (obj, keys, value) => {
  let current = obj;
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    if (i === keys.length - 1) {
      // we've reached the desired key, so update its value
      current[key] = value;
    } else {
      // we're still traversing the object, so create the key if it doesn't exist
      if (!current[key]) {
        current[key] = {};
      }
      current = current[key];
    }
  }
  return obj;
};
export const getObjectProperty = (object, keyPath) => {
  if (!Array.isArray(keyPath)) {
    keyPath = [keyPath];
  }
  return keyPath.reduce((baseObj, key) => baseObj && baseObj[key], object);
};
export function resolveAliasesFromConfig(config, props) {
  const aliasResolvedProps = {};
  Object.keys(props).map(key => {
    var _config$aliases;
    if (config !== null && config !== void 0 && (_config$aliases = config.aliases) !== null && _config$aliases !== void 0 && _config$aliases[key]) {
      var _config$aliases2;
      aliasResolvedProps[(_config$aliases2 = config.aliases) === null || _config$aliases2 === void 0 ? void 0 : _config$aliases2[key]] = props[key];
    } else {
      aliasResolvedProps[key] = props[key];
    }
  });
  return aliasResolvedProps;
}

// function checkKey(obj: any, key: any) {
//   return obj && obj.hasOwnProperty(key);
// }
function isNumeric(str) {
  return typeof str === 'number' ? true : false;
  // return /^[-+]?[0-9]*\.?[0-9]+$/.test(str);
}

export function resolveStringToken(string, config, tokenScaleMap, propName, scale) {
  // console.setStartTimeStamp('resolveStringToken');
  let typeofResult = 'string';
  const token_scale = scale ?? tokenScaleMap[propName];
  const splitTokenBySpace = string.split(' ');
  const result = splitTokenBySpace.map(currentToken => {
    let splitCurrentToken = currentToken.split('$');
    if (currentToken.startsWith('$')) {
      splitCurrentToken = splitCurrentToken.slice(1);
    }
    if (splitCurrentToken.length > 1) {
      const tokenValue = getObjectProperty(config.tokens, splitCurrentToken);
      typeofResult = typeof tokenValue;
      return tokenValue;
    } else {
      if (tokenScaleMap[propName]) {
        var _config$tokens$token_;
        let modifiedTokenScale = token_scale;
        if (token_scale === 'sizes' && !(config !== null && config !== void 0 && (_config$tokens$token_ = config.tokens[token_scale]) !== null && _config$tokens$token_ !== void 0 && _config$tokens$token_.hasOwnProperty(splitCurrentToken[0]))) {
          modifiedTokenScale = 'space';
        }
        if (!config || !config.tokens) {
          throw new Error('You cannot use tokens without wrapping the component with StyledProvider. Please wrap the component with a StyledProvider and pass theme config.');
        }
        if (config !== null && config !== void 0 && config.tokens[modifiedTokenScale] && config !== null && config !== void 0 && config.tokens[modifiedTokenScale].hasOwnProperty(splitCurrentToken[0])) {
          var _config$tokens;
          const tokenValue = config === null || config === void 0 || (_config$tokens = config.tokens) === null || _config$tokens === void 0 || (_config$tokens = _config$tokens[modifiedTokenScale]) === null || _config$tokens === void 0 ? void 0 : _config$tokens[splitCurrentToken[0]];
          typeofResult = typeof tokenValue;
          if (typeof tokenValue !== 'undefined' && tokenValue !== null) {
            return tokenValue;
          } else {
            return '';
          }
        }
      }
      return splitCurrentToken[splitCurrentToken.length - 1];
    }
  });
  let finalResult = result;

  // console.setEndTimeStamp('resolveStringToken');
  if (finalResult.length !== 0 && finalResult[0] === '') {
    return undefined;
  } else {
    finalResult = result.join(' ');
    if (isNumeric(finalResult) || typeofResult === 'number') {
      return parseFloat(finalResult);
    } else {
      return finalResult;
    }
  }
}
export const getTokenFromConfig = (config, prop, value) => {
  // console.setStartTimeStamp('getTokenFromConfig');
  const aliasTokenType = config.propertyTokenMap[prop];
  let IsNegativeToken = false;
  if (typeof value === 'string' && value.startsWith('-')) {
    IsNegativeToken = true;
    value = value.slice(1);
  }
  // const tokenScale = config?.tokens?.[aliasTokenType];
  let token;

  // resolveStringToken(value, config, config.propertyTokenMap);
  if (typeof value === 'string' && value.includes('$')) {
    var _config$propertyResol;
    if ((_config$propertyResol = config.propertyResolver) !== null && _config$propertyResol !== void 0 && _config$propertyResol[prop]) {
      var _config$propertyResol2;
      let transformer = (_config$propertyResol2 = config.propertyResolver) === null || _config$propertyResol2 === void 0 ? void 0 : _config$propertyResol2[prop];
      token = transformer(value, function (value1) {
        let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : aliasTokenType;
        return resolveStringToken(value1, config, config.propertyTokenMap, prop, scale);
      });
    } else {
      token = resolveStringToken(value, config, config.propertyTokenMap, prop);
    }
  } else {
    var _config$propertyResol3;
    if ((_config$propertyResol3 = config.propertyResolver) !== null && _config$propertyResol3 !== void 0 && _config$propertyResol3[prop]) {
      var _config$propertyResol4;
      let transformer = (_config$propertyResol4 = config.propertyResolver) === null || _config$propertyResol4 === void 0 ? void 0 : _config$propertyResol4[prop];
      token = transformer(value, function (value) {
        let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : aliasTokenType;
        if (typeof value === 'string' && value.includes('$')) {
          return resolveStringToken(value, config, config.propertyTokenMap, prop, scale);
        } else {
          return value;
        }
      });
    } else {
      token = value;
    }
  }
  if (IsNegativeToken) {
    if (typeof token === 'number') {
      token = -token;
    } else if (typeof token === 'string') {
      token = `-${token}`;
    }
  }

  // console.setEndTimeStamp('getTokenFromConfig');

  return token;
};
export function getResolvedTokenValueFromConfig(config, _props, prop, value) {
  let resolvedTokenValue = getTokenFromConfig(config, prop, value);

  // Special case for token ends with em on mobile
  // This will work for lineHeight and letterSpacing
  // console.log('hello from token ends with em on mobile', resolvedTokenValue);
  // if (
  //   typeof resolvedTokenValue === 'string' &&
  //   resolvedTokenValue.endsWith('em') &&
  //   Platform.OS !== 'web'
  // ) {
  //   const fontSize = getTokenFromConfig(config, 'fontSize', props?.fontSize);
  //   resolvedTokenValue =
  //     parseFloat(resolvedTokenValue) * parseFloat(fontSize ?? BASE_FONT_SIZE);
  // }

  return resolvedTokenValue;
}
export function resolveTokensFromConfig(config, props) {
  let newProps = {};
  Object.keys(props).map(prop => {
    const value = props[prop];
    newProps[prop] = getResolvedTokenValueFromConfig(config, props, prop, value);
  });
  return newProps;
}
export function resolvedTokenization(props, config) {
  // console.setStartTimeStamp('resolvedTokenization');
  const aliasedResolvedProps = resolveAliasesFromConfig(config, props);
  const newProps = resolveTokensFromConfig(config, aliasedResolvedProps);
  // console.setEndTimeStamp('resolvedTokenization');
  return newProps;
}
// ----------------------------------------------------- 6. Theme Boot Resolver -----------------------------------------------------
export const deepMerge = function () {
  let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let source = arguments.length > 1 ? arguments[1] : undefined;
  // console.setStartTimeStamp('deepMerge');

  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      if (typeof target[key] === 'object' && typeof source[key] === 'object') {
        deepMerge(target[key], source[key]);
      } else {
        target[key] = source[key];
      }
    }
  }
  // console.setEndTimeStamp('deepMerge');
  return target;
};
export const shallowMerge = function () {
  let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let source = arguments.length > 1 ? arguments[1] : undefined;
  // console.setStartTimeStamp('deepMerge');
  return Object.assign(target, source);
};
export function deepMergeObjects() {
  const isObject = obj => obj && typeof obj === 'object' && !Array.isArray(obj);
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }
  return objects.reduce((prev, obj) => {
    if (isObject(prev) && isObject(obj)) {
      Object.keys(obj).forEach(key => {
        if (isObject(obj[key])) {
          if (!prev[key] || !isObject(prev[key])) {
            prev[key] = {};
          }
          prev[key] = deepMergeObjects(prev[key], obj[key]);
        } else {
          if (Array.isArray(obj[key]) && Array.isArray(prev[key])) {
            prev[key] = prev[key].concat(obj[key]); // Merge arrays without converting to an object
          } else {
            prev[key] = obj[key];
          }
        }
      });
    }
    return prev;
  }, {});
}
export const deepMergeArray = function () {
  let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let source = arguments.length > 1 ? arguments[1] : undefined;
  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      if (Array.isArray(target[key]) && Array.isArray(source[key])) {
        target[key] = [...target[key], ...source[key]];
      } else if (typeof target[key] === 'object' && typeof source[key] === 'object') {
        deepMergeArray(target[key], source[key]);
      } else {
        target[key] = source[key];
      }
    }
  }
  return target;
};
export const BASE_FONT_SIZE = 16;
export const convertAbsoluteToRem = px => {
  return `${px / BASE_FONT_SIZE}rem`;
};
export const convertAbsoluteToPx = px => {
  return `${px}px`;
};
export const convertRemToAbsolute = rem => {
  return rem * BASE_FONT_SIZE;
};
export const platformSpecificSpaceUnits = (theme, platform) => {
  const scales = ['space', 'sizes', 'fontSizes', 'radii', 'borderWidths', 'lineHeights', 'letterSpacings'];
  const newTheme = {
    ...theme
  };
  const isWeb = platform === 'web';
  scales.forEach(key => {
    var _theme$tokens;
    // const scale = get(theme, key, {});
    //@ts-ignore
    const scale = (theme === null || theme === void 0 || (_theme$tokens = theme.tokens) === null || _theme$tokens === void 0 ? void 0 : _theme$tokens[key]) ?? {};
    const newScale = {
      ...scale
    };
    for (const scaleKey in scale) {
      const val = scale[scaleKey];
      if (typeof val !== 'object') {
        const isAbsolute = typeof val === 'number';
        const isPx = !isAbsolute && val.endsWith('px');
        const isRem = !isAbsolute && val.endsWith('rem');
        // const isEm = !isAbsolute && !isRem && val.endsWith('em');

        // console.log(isRem, key, val, isAbsolute, 'scale here');

        // If platform is web, we need to convert absolute unit to rem. e.g. 16 to 1rem
        if (isWeb) {
          // if (isAbsolute) {
          //   newScale[scaleKey] = convertAbsoluteToRem(val);
          // }
          if (isAbsolute) {
            newScale[scaleKey] = convertAbsoluteToPx(val);
          }
        }
        // If platform is not web, we need to convert px unit to absolute and rem unit to absolute. e.g. 16px to 16. 1rem to 16.
        else {
          if (isRem) {
            newScale[scaleKey] = convertRemToAbsolute(parseFloat(val));
          } else if (isPx) {
            newScale[scaleKey] = parseFloat(val);
          }
        }
      }
    }
    if (newTheme.tokens) {
      //@ts-ignore
      newTheme.tokens[key] = newScale;
    } else {
      console.warn('No tokens found in config! Please pass config in Provider to resolve styles!');
    }
  });
  return newTheme;
};
export function extractWidthValues(condition) {
  const widthRegex = /\((min-width|max-width)?\s*:\s*(\d+)\s*(px)?\)/g;
  const matches = [...condition.matchAll(widthRegex)];
  const widthValues = [];
  for (const match of matches) {
    if (match[1]) {
      widthValues.push(parseInt(match[2]));
    } else {
      widthValues.push(parseInt(match[2]));
    }
  }
  return widthValues;
}
export function addThemeConditionInMeta(originalThemeObject, CONFIG) {
  let themeObject = originalThemeObject;
  themeObject.meta.themeCondition = {};
  // Creating theme conditions for theme
  Object.keys(themeObject.original).forEach(resolvedToken => {
    Object.keys(CONFIG.themes ?? {}).forEach(themeName => {
      let theme = CONFIG.themes[themeName];
      Object.keys(theme).forEach(tokenScale => {
        const tokenScaleValue = theme[tokenScale];
        Object.keys(tokenScaleValue).forEach(token => {
          if (!themeObject.meta.themeCondition[themeName]) {
            themeObject.meta.themeCondition[themeName] = {};
          }
          if (themeObject.original[resolvedToken] === token) {
            themeObject.meta.themeCondition[themeName] = {
              ...themeObject.meta.themeCondition[themeName],
              ...resolvedTokenization({
                [resolvedToken]: tokenScaleValue[token]
              }, CONFIG)
            };
          }
        });
      });
    });
  });
  return themeObject;
}
//# sourceMappingURL=utils.js.map