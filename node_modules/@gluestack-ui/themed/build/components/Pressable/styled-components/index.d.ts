/// <reference types="react" />
export declare const Pressable: import("react").ForwardRefExoticComponent<Omit<Omit<Omit<Omit<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>), unknown, import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>, "Pressable">> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>)>> & {
    as?: any;
    children?: any;
}, "animationComponentGluestack">, "ref"> & import("react").RefAttributes<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>> & Omit<import("react-native").PressableProps, "children"> & {
    children?: import("react").ReactNode | (({ hovered, pressed, focused, focusVisible, disabled, }: {
        hovered?: boolean | undefined;
        pressed?: boolean | undefined;
        focused?: boolean | undefined;
        focusVisible?: boolean | undefined;
        disabled?: boolean | undefined;
    }) => import("react").ReactNode);
}, "ref"> & import("react").RefAttributes<unknown>>;
