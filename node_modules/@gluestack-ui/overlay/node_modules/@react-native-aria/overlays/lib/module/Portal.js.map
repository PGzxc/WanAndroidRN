{"version":3,"sources":["Portal.tsx"],"names":["React","useEffect","StyleSheet","View","PortalContext","createContext","globalOverlayCounter","PortalProvider","props","items","setItems","useState","setOverlayItem","element","overlayId","prev","concat","id","node","updateOverlayItem","overlayItem","find","item","map","removeOverlayItem","newItems","filter","isSSR","children","OverlayView","style","absoluteFill","OverlayProvider","OverlayContainer","context","usePortalProvider","useRef","undefined","current","display","useContext"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,UAAT,EAAqBC,IAArB,QAA4C,cAA5C;AAoBA,MAAMC,aAAa,gBAAGJ,KAAK,CAACK,aAAN,CAA0C,IAA1C,CAAtB;AAEA,IAAIC,oBAAoB,GAAG,CAA3B;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAGJ;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAmC,EAAnC,CAA1B;;AAEA,QAAMC,cAAc,GAAIC,OAAD,IAAwB;AAC7C,UAAMC,SAAS,GAAG,EAAER,oBAApB;AACAI,IAAAA,QAAQ,CAAEK,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAY,CAAC;AAAEC,MAAAA,EAAE,EAAEH,SAAN;AAAiBI,MAAAA,IAAI,EAAEL;AAAvB,KAAD,CAAZ,CAAX,CAAR;AACA,WAAOC,SAAP;AACD,GAJD;;AAMA,QAAMK,iBAAiB,GAAG,CAACF,EAAD,EAAaC,IAAb,KAAiC;AACzDR,IAAAA,QAAQ,CAAEK,IAAD,IAAU;AACjB,YAAMK,WAAW,GAAGL,IAAI,CAACM,IAAL,CAAWC,IAAD,IAAUA,IAAI,CAACL,EAAL,IAAWA,EAA/B,CAApB;;AACA,UAAI,CAACG,WAAL,EAAkB;AAChB,eAAOL,IAAI,CAACC,MAAL,CAAY,CAAC;AAAEC,UAAAA,EAAE,EAAEA,EAAN;AAAUC,UAAAA;AAAV,SAAD,CAAZ,CAAP;AACD,OAFD,MAEO;AACL,eAAOH,IAAI,CAACQ,GAAL,CAAUD,IAAD,IAAU;AACxB,cAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAClB,mBAAO;AAAEA,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAP;AACD;;AAED,iBAAOI,IAAP;AACD,SANM,CAAP;AAOD;AACF,KAbO,CAAR;AAcD,GAfD;;AAiBA,QAAME,iBAAiB,GAAIP,EAAD,IAAgB;AACxCP,IAAAA,QAAQ,CAAEK,IAAD,IAAU;AACjB,YAAMU,QAAQ,GAAGV,IAAI,CAACW,MAAL,CAAaJ,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAlC,CAAjB;AACA,aAAOQ,QAAP;AACD,KAHO,CAAR;AAID,GALD;;AAOA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLhB,MAAAA,KADK;AAELG,MAAAA,cAFK;AAGLY,MAAAA,iBAHK;AAILL,MAAAA,iBAJK;AAKLQ,MAAAA,KAAK,EAAEnB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEmB;AALT;AADT,KASGnB,KAAK,CAACoB,QATT,EAYGnB,KAAK,CAACc,GAAN,CAAWD,IAAD,IAAU;AACnB,wBAAO,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEA,IAAI,CAACL;AAA1B,OAA+BK,IAAI,CAACJ,IAApC,CAAP;AACD,GAFA,CAZH,CADF;AAkBD;;AAED,SAASW,WAAT,CAAqB;AAAEC,EAAAA,KAAF;AAAS,KAAGtB;AAAZ,CAArB,EAA8D;AAC5D,sBACE,oBAAC,IAAD;AACE,IAAA,aAAa,EAAC,UADhB;AAEE,IAAA,KAAK,EAAE,CAACN,UAAU,CAAC6B,YAAZ,EAA0BD,KAA1B,CAFT;AAGE,IAAA,WAAW,EAAE;AAHf,KAIMtB,KAJN,EADF;AAQD;;AAED,OAAO,MAAMwB,eAAe,GAAGzB,cAAxB;AAEP,OAAO,SAAS0B,gBAAT,CAA0BzB,KAA1B,EAAqD;AAC1D,QAAM0B,OAAO,GAAGC,iBAAiB,EAAjC;AACA,QAAMrB,SAAS,GAAGd,KAAK,CAACoC,MAAN,CAAiCC,SAAjC,CAAlB;AACA,QAAMxB,OAAO,gBAAG,oBAAC,WAAD,EAAiBL,KAAjB,CAAhB;AAEAP,EAAAA,SAAS,CACP,MAAM;AACJ;AACA,QAAIa,SAAS,CAACwB,OAAV,KAAsBD,SAA1B,EAAqC;AACnCvB,MAAAA,SAAS,CAACwB,OAAV,GAAoBJ,OAApB,aAAoBA,OAApB,uBAAoBA,OAAO,CAAEtB,cAAT,CAAwBC,OAAxB,CAApB;AACD,KAFD,CAGA;AAHA,SAIK;AACH,YAAIC,SAAS,CAACwB,OAAd,EAAuB;AACrBJ,UAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEf,iBAAT,CAA2BL,SAAS,CAACwB,OAArC,EAA8CzB,OAA9C;AACD;AACF;AACF,GAZM,EAaP;AACA,GAACL,KAAD,CAdO,CAAT,CAL0D,CAsB1D;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAIa,SAAS,CAACwB,OAAd,EAAuB;AACrBJ,QAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEV,iBAAT,CAA2BV,SAAS,CAACwB,OAArC;AACD;AACF,KAJD;AAKD,GANQ,EAMN,EANM,CAAT,CAvB0D,CA+B1D;;AACA,MAAIJ,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEP,KAAT,IAAkB,CAACb,SAAS,CAACwB,OAAjC,EAA0C;AACxC,wBAAO,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAb,OAAmC1B,OAAnC,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASsB,iBAAT,GAA6B;AAC3B,QAAMD,OAAO,GAAGlC,KAAK,CAACwC,UAAN,CAAiBpC,aAAjB,CAAhB;AACA,SAAO8B,OAAP;AACD","sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n  isSSR?: boolean;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: {\n  children: ReactNode;\n  isSSR?: boolean;\n}) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (element: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: element }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) => {\n      const overlayItem = prev.find((item) => item.id == id);\n      if (!overlayItem) {\n        return prev.concat([{ id: id, node }]);\n      } else {\n        return prev.map((item) => {\n          if (item.id === id) {\n            return { id, node };\n          }\n\n          return item;\n        });\n      }\n    });\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{\n        items,\n        setOverlayItem,\n        removeOverlayItem,\n        updateOverlayItem,\n        isSSR: props?.isSSR,\n      }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView({ style, ...props }: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={[StyleSheet.absoluteFill, style]}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  const element = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(element);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, element);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  // Rendering elements for SSR\n  if (context?.isSSR && !overlayId.current) {\n    return <View style={{ display: 'none' }}>{element}</View>;\n  }\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]}