{"version":3,"sources":["calculatePosition.ts"],"names":["AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","getContainerDimensions","containerNode","width","height","scroll","tagName","document","documentElement","clientWidth","clientHeight","getScroll","node","scrollTop","scrollLeft","scrollWidth","scrollHeight","getDelta","axis","offset","size","containerDimensions","padding","containerScroll","containerHeight","startEdgeOffset","endEdgeOffset","Math","max","getMargins","style","getComputedStyle","parseInt","marginTop","marginBottom","marginLeft","marginRight","parsePlacement","input","placement","crossPlacement","split","crossAxis","crossSize","computePosition","childOffset","boundaryDimensions","overlaySize","placementInfo","crossOffset","containerOffsetWithBoundary","isContainerPositioned","position","floor","getMaxHeight","margins","getAvailableSpace","calculatePositionInternal","placementInput","scrollSize","flip","shouldOverlapWithTrigger","normalizedOffset","space","flippedPlacementInfo","flippedPosition","flippedSpace","delta","maxHeight","min","arrowPosition","arrowOffsetLeft","arrowOffsetTop","calculatePosition","opts","targetNode","overlayNode","scrollNode","shouldFlip","boundaryElement","container","offsetParent","body","isBodyContainer","containerPositionStyle","matrix","getPropertyValue","transform","regex","matches","match","scaleX","scaleY","parseFloat","Number","isFinite"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Axis,\n  Placement,\n  PlacementAxis,\n  SizeAxis,\n} from '@react-types/overlays';\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\n\ninterface Position {\n  top?: number;\n  left?: number;\n  bottom?: number;\n  right?: number;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  scroll: Position;\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis;\n  crossPlacement: PlacementAxis;\n  axis: Axis;\n  crossAxis: Axis;\n  size: SizeAxis;\n  crossSize: SizeAxis;\n}\n\ninterface Offset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\ninterface PositionOpts {\n  placement: Placement;\n  targetNode: HTMLElement;\n  overlayNode: HTMLElement;\n  scrollNode: HTMLElement;\n  padding: number;\n  shouldFlip: boolean;\n  boundaryElement: HTMLElement;\n  offset: number;\n  crossOffset: number;\n  shouldOverlapWithTrigger: boolean;\n}\n\nexport interface PositionResult {\n  position?: Position;\n  arrowOffsetLeft?: number;\n  arrowOffsetTop?: number;\n  maxHeight?: number;\n  placement: PlacementAxis;\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left',\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top',\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width',\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({ width, height, top, left } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return { width, height, scroll, top, left };\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight,\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0,\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  } = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] +=\n      (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  } /* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  // let minViablePosition =\n  //   childOffset[crossAxis] +\n  //   childOffset[crossSize] / 2 -\n  //   overlaySize[crossSize];\n  // // this is button position of center, aligns top of overlay with button center\n  // let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n\n  // // clamp it into the range of the min/max positions\n  // position[crossAxis] = Math.min(\n  //   Math.max(minViablePosition, position[crossAxis]),\n  //   maxViablePosition\n  // );\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned\n      ? containerOffsetWithBoundary[size]\n      : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(\n      containerHeight - childOffset[axis] + offset\n    );\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    ? // We want the distance between the top of the overlay to the bottom of the boundary\n    Math.max(\n      0,\n      boundaryDimensions.height +\n      boundaryDimensions.top +\n      boundaryDimensions.scroll.top - // this is the bottom of the boundary\n      (containerOffsetWithBoundary.top + position.top) - // this is the top of the overlay\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    )\n    : // We want the distance between the top of the trigger to the top of the boundary\n    Math.max(\n      0,\n      childOffset.top +\n      containerOffsetWithBoundary.top - // this is the top of the trigger\n      (boundaryDimensions.top + boundaryDimensions.scroll.top) - // this is the top of the boundary\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let { placement, axis, size } = placementInfo;\n  if (placement === axis) {\n    return Math.max(\n      0,\n      childOffset[axis] -\n      boundaryDimensions[axis] -\n      boundaryDimensions.scroll[axis] +\n      containerOffsetWithBoundary[axis] -\n      margins[axis] -\n      margins[FLIPPED_DIRECTION[axis]] -\n      padding\n    );\n  }\n\n  return Math.max(\n    0,\n    boundaryDimensions[size] +\n    boundaryDimensions[axis] +\n    boundaryDimensions.scroll[axis] -\n    containerOffsetWithBoundary[axis] -\n    childOffset[axis] -\n    childOffset[size] -\n    margins[axis] -\n    margins[FLIPPED_DIRECTION[axis]] -\n    padding\n  );\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis,\n  } = placementInfo;\n  let position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    offset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(\n      `${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement\n    );\n    let flippedPosition = computePosition(\n      childOffset,\n      boundaryDimensions,\n      overlaySize,\n      flippedPlacementInfo,\n      offset,\n      crossOffset,\n      containerOffsetWithBoundary,\n      isContainerPositioned\n    );\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    normalizedOffset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n  delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] =\n    childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] =\n      position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement,\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger,\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned =\n    !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer\n    ? getOffset(targetNode)\n    : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset =\n    boundaryElement.tagName === 'BODY'\n      ? getOffset(container)\n      : getPosition(container, boundaryElement);\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"]}