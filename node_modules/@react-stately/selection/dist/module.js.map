{"mappings":"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","sources":["packages/@react-stately/selection/src/index.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {MultipleSelectionStateProps} from './useMultipleSelectionState';\nexport type {FocusState, SingleSelectionState, MultipleSelectionState, MultipleSelectionManager} from './types';\nexport {useMultipleSelectionState} from './useMultipleSelectionState';\nexport {SelectionManager} from './SelectionManager';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Set<Key> {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {compareNodeOrder, getChildNodes, getFirstItem} from '@react-stately/collections';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key | null, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item && compareNodeOrder(this.collection, item, first) < 0)) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item && compareNodeOrder(this.collection, item, last) > 0)) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (compareNodeOrder(this.collection, fromItem, toItem) <= 0) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys(getFirstItem(getChildNodes(item, this.collection)).key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n\n  isLink(key: Key) {\n    return !!this.collection.getItem(key)?.props?.href;\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}