function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { createContext, useCallback, useState } from 'react';
import { Platform, Pressable } from 'react-native';
export const ContextPressable = /*#__PURE__*/createContext({
  pressed: false,
  hovered: false
});
export function MotionPressable(props) {
  // @ts-ignore Web props cause errors
  const {
    onPressIn,
    onPressOut,
    onMouseEnter,
    onMouseLeave,
    children,
    ...rest
  } = props;
  const [state, setState] = useState({
    pressed: false,
    hovered: false
  });
  const update = useCallback((pressed, hovered) => {
    setState(cur => ({
      pressed: pressed !== null && pressed !== void 0 ? pressed : cur.pressed,
      hovered: hovered !== null && hovered !== void 0 ? hovered : cur.hovered
    }));
  }, []);
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    onPressIn: e => {
      update(true, undefined);
      onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    },
    onPressOut: e => {
      update(false, undefined);
      onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);
    } // @ts-ignore
    ,
    onMouseEnter: Platform.OS === 'web' ? e => {
      update(undefined, true);
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
    } : undefined // @ts-ignore
    ,
    onMouseLeave: Platform.OS === 'web' ? e => {
      update(undefined, false);
      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
    } : undefined
  }, rest), /*#__PURE__*/React.createElement(ContextPressable.Provider, {
    value: state
  }, children));
}
//# sourceMappingURL=MotionPressable.js.map