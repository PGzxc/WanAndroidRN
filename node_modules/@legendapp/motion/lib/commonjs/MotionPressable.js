"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextPressable = void 0;
exports.MotionPressable = MotionPressable;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ContextPressable = /*#__PURE__*/(0, _react.createContext)({
  pressed: false,
  hovered: false
});
exports.ContextPressable = ContextPressable;

function MotionPressable(props) {
  // @ts-ignore Web props cause errors
  const {
    onPressIn,
    onPressOut,
    onMouseEnter,
    onMouseLeave,
    children,
    ...rest
  } = props;
  const [state, setState] = (0, _react.useState)({
    pressed: false,
    hovered: false
  });
  const update = (0, _react.useCallback)((pressed, hovered) => {
    setState(cur => ({
      pressed: pressed !== null && pressed !== void 0 ? pressed : cur.pressed,
      hovered: hovered !== null && hovered !== void 0 ? hovered : cur.hovered
    }));
  }, []);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, _extends({
    onPressIn: e => {
      update(true, undefined);
      onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    },
    onPressOut: e => {
      update(false, undefined);
      onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);
    } // @ts-ignore
    ,
    onMouseEnter: _reactNative.Platform.OS === 'web' ? e => {
      update(undefined, true);
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
    } : undefined // @ts-ignore
    ,
    onMouseLeave: _reactNative.Platform.OS === 'web' ? e => {
      update(undefined, false);
      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
    } : undefined
  }, rest), /*#__PURE__*/_react.default.createElement(ContextPressable.Provider, {
    value: state
  }, children));
}
//# sourceMappingURL=MotionPressable.js.map